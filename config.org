#+title: Doom Emacs Config
#+author: Michael Neuper

This is my literate doom emacs config.
[[Basic]] sets up some basic emacs and doom configurations.
[[Doom Modules]] contains the configuration all packages and tries to mirror the structure of doom's =init.el=.

- Each top-level heading under [[doom modules]] corresponds to a Doom module category (e.g., [[:lang]], [[ui]]), as declared in the =doom!= macro in =init.el=.
- Each second-level heading  corresponds to an individual module within that category (e.g., [[org]], [[modeline]]).
- Each third-level heading represents any flags applied to that module (e.g., [[+pretty]], [[+roam2]]), which alter the module’s behavior or dependencies.
- Subsequent headings:
  + Core packages enabled by those flags (e.g., [[org-modern]])
  + Manually installed packages related to that module (e.g., org-modern-indent)
  + Configuration snippets or tweaks logically grouped by package or functionality

* Contents :toc:
- [[#basic][Basic]]
  - [[#defaults][Defaults]]
  - [[#visual-enchancements][Visual Enchancements]]
- [[#doom-modules][Doom Modules]]
  - [[#completion][:completion]]
  - [[#ui][:ui]]
  - [[#editor][:editor]]
  - [[#emacs][:emacs]]
  - [[#term][:term]]
  - [[#tools][:tools]]
  - [[#lang][:lang]]

* Basic
** Defaults
*** Speed
Make this file run slightly faster (see [[https://nullprogram.com/blog/2016/12/22/][this blog post]]).
#+begin_src emacs-lisp
;;; config.el -*- lexical-binding: t; -*-
#+end_src

Make emacs faster.
#+begin_src emacs-lisp
(use-package! gcmh
  :init
  (setq gcmh-idle-delay 5
        gcmh-high-cons-threshold (* 256 1024 1024))  ; 256MB during idle
  :config
  (gcmh-mode 1))

(setq gc-cons-threshold 200000000) ; previous 33554432
#+end_src
*** Basic
#+begin_src emacs-lisp
;; credentials
(setq user-full-name "Michael Neuper"
      user-mail-address "michael@michaelneuper.com")

;; autosave and backup
(setq auto-save-default t
      make-backup-files t)

;; kill emacs without confiming
(setq confirm-kill-emacs nil)

;; remap <localleader> from SPC m to SPC l
(setq doom-localleader-key "SPC l"
      doom-localleader-alt-key "M-SPC l")
#+end_src

Some =which-key= adjustments.
#+begin_src emacs-lisp
(use-package! which-key
  :init
  (setq which-key-idle-delay 0.5
        which-key-allow-multiple-replacements t)
  :config
  (which-key-mode 1)

  ;; modified from https://tecosaur.github.io/emacs-config/config.html#which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))
   '(("" . "\\`+?magit[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "\\1"))))
#+end_src
*** macOS
Some macOS specific settings.

- For thinner fonts on macOS run ~defaults write org.gnu.Emacs AppleFontSmoothing -int 0~
- To revert run ~defaults delete org.gnu.Emacs AppleFontSmoothing~
#+begin_src emacs-lisp
(if (featurep :system 'macos)
    (setq mac-command-modifier 'meta
          mac-option-modifier 'none
          mac-right-option-modifier 'super
          ns-use-proxy-icon nil ; disable file icon in titlebar
          ns-use-native-fullscreen t))
#+end_src
** Visual Enchancements
*** Theme & Fonts
Use the gruvbox theme and set some fonts.
The fonts need to be installed on your machine and make sure to run ~M-x nerd-icons-install-fonts~.
#+ATTR_ORG: :width 500
[[file:images/gruvbox-colorscheme.png]]
#+begin_src emacs-lisp
(setq doom-theme 'doom-gruvbox)

(if (featurep :system 'macos)
    (progn
      (defconst my/serif-font "New York")
      (defconst my/sans-serif-font "SF Pro")
      (defconst my/mono-font "SF Mono"))
  (progn
    (defvar my/serif-font "Latin Modern Roman")
    (defvar my/sans-serif-font "Inter")
    (defvar my/mono-font "JetBrainsMono Nerd Font")))

(setq doom-font (font-spec :family my/mono-font :size 15)
      doom-variable-pitch-font (font-spec :family my/serif-font)
      doom-emoji-font (font-spec :family "Apple Color Emoji"))
#+end_src
*** Lines
Enable relative line numbers and make their slant normal (not italic).
#+begin_src emacs-lisp
;; FIXME incorrect numbers when org headings are folded
(setq display-line-numbers-type 'relative)

(add-hook! display-line-numbers-mode
  (custom-set-faces!
    '((line-number line-number-current-line)
      :slant normal)
    `(line-number-current-line
      :background ,(face-attribute 'line-number :background)
      :foreground ,(doom-color 'fg))))
#+end_src

Only highlight  the current line in programming modes and =dired=.
#+begin_src emacs-lisp
(setq global-hl-line-modes '(prog-mode dired-mode))
#+end_src

Display a fill indicator at 80 characters in =prog-mode=.
#+begin_src emacs-lisp
;; (setq display-fill-column-indicator-column 80)
;; (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+end_src
*** Window
Start emacs in a 100x40 window.
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(width . 100))
(add-to-list 'default-frame-alist '(height . 40))
#+end_src

Format the title.
#+begin_src emacs-lisp
;; copied from https://hieuphay.com/doom-emacs-config/#some-good-defaults
;; (setq frame-title-format
;;       '(""
;;         (:eval
;;          (if (s-contains-p org-roam-directory (or buffer-file-name ""))
;;              (replace-regexp-in-string
;;               ".*/[0-9]*-?" "☰ "
;;               (subst-char-in-string ?_ ?  buffer-file-name))
;;            "%b"))
;;         (:eval
;;          (let ((project-name (projectile-project-name)))
;;            (unless (string= "-" project-name)
;;              (format (if (buffer-modified-p)  " ◉ %s" " ● %s") project-name))))))

(setq frame-title-format '("" (:eval buffer-name) "%b"))
#+end_src
* Doom Modules
** :completion
*** corfu
Disable corfu's auto-popups and preselect the first candidate.
#+begin_src emacs-lisp
(after! corfu
  (setq corfu-auto nil
        corfu-preselect 'first
        corfu-preview-current t
        +corfu-want-tab-prefer-expand-snippets t))
#+end_src
** :ui
*** deft
Quickly search and filter through [[+roam2]] notes.
#+begin_src emacs-lisp
(after! deft
  (setq deft-recursive t
        deft-use-filter-string-for-filename t
        deft-default-extension "org"
        deft-directory org-roam-directory))

(map! :leader
      :prefix "r"
      :desc "Search with deft"
      "s" #'deft)
#+end_src
*** doom-dashboard
#+ATTR_ORG: :width 350
[[file:images/dashboard.png]]

Remove the shortmenu and footer from the dashboard.
#+begin_src emacs-lisp
(remove-hook! '+doom-dashboard-functions
  #'doom-dashboard-widget-shortmenu
  #'doom-dashboard-widget-footer)
#+end_src

Add a random custom message along with the emacs icon in the footer like the [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]] package.
Also disable [[modeline]] and cursor.
#+begin_src emacs-lisp
;; copied from https://github.com/emacs-dashboard/emacs-dashboard/blob/master/dashboard-widgets.el
(defcustom my/dashboard-footer-messages
  '("The one true editor, Emacs!"
    "Who the hell uses VIM anyway? Go Evil!"
    "Free as free speech, free as free Beer"
    "Happy coding!"
    "Vi Vi Vi, the editor of the beast"
    "Welcome to the church of Emacs"
    "While any text editor can save your files, only Emacs can save your soul"
    "I showed you my source code, pls respond")
  "A list of messages, one of which dashboard chooses to display.")

(add-hook! '+doom-dashboard-functions :append
  (let* ((icon (propertize  #(" " 0 1 (display (height 1.5))) 'face `(:foreground ,(doom-color 'grey))))
         (msg  (nth (random (length my/dashboard-footer-messages))
                    my/dashboard-footer-messages))
         (line (concat icon msg)))
    (insert "\n" (+doom-dashboard--center +doom-dashboard--width line) "\n"))

      (setq mode-line-format nil))

(setq-hook! '+doom-dashboard-mode-hook
   evil-normal-state-cursor (list nil))
#+end_src

Set a custom ascii banner for when emacs is used in the terminal, and a splash image for GUI mode.
#+begin_src emacs-lisp
;; modified from https://discourse.doomemacs.org/t/how-to-change-your-splash-screen/57
(defun my-weebery-is-always-greater ()
  (let* ((banner '("⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀"
                   "⢸⠉⣹⠋⠉⢉⡟⢩⢋⠋⣽⡻⠭⢽⢉⠯⠭⠭⠭⢽⡍⢹⡍⠙⣯⠉⠉⠉⠉⠉⣿⢫⠉⠉⠉⢉⡟⠉⢿⢹⠉⢉⣉⢿⡝⡉⢩⢿⣻⢍⠉⠉⠩⢹⣟⡏⠉⠹⡉⢻⡍⡇"
                   "⢸⢠⢹⠀⠀⢸⠁⣼⠀⣼⡝⠀⠀⢸⠘⠀⠀⠀⠀⠈⢿⠀⡟⡄⠹⣣⠀⠀⠐⠀⢸⡘⡄⣤⠀⡼⠁⠀⢺⡘⠉⠀⠀⠀⠫⣪⣌⡌⢳⡻⣦⠀⠀⢃⡽⡼⡀⠀⢣⢸⠸⡇"
                   "⢸⡸⢸⠀⠀⣿⠀⣇⢠⡿⠀⠀⠀⠸⡇⠀⠀⠀⠀⠀⠘⢇⠸⠘⡀⠻⣇⠀⠀⠄⠀⡇⢣⢛⠀⡇⠀⠀⣸⠇⠀⠀⠀⠀⠀⠘⠄⢻⡀⠻⣻⣧⠀⠀⠃⢧⡇⠀⢸⢸⡇⡇"
                   "⢸⡇⢸⣠⠀⣿⢠⣿⡾⠁⠀⢀⡀⠤⢇⣀⣐⣀⠀⠤⢀⠈⠢⡡⡈⢦⡙⣷⡀⠀⠀⢿⠈⢻⣡⠁⠀⢀⠏⠀⠀⠀⢀⠀⠄⣀⣐⣀⣙⠢⡌⣻⣷⡀⢹⢸⡅⠀⢸⠸⡇⡇"
                   "⢸⡇⢸⣟⠀⢿⢸⡿⠀⣀⣶⣷⣾⡿⠿⣿⣿⣿⣿⣿⣶⣬⡀⠐⠰⣄⠙⠪⣻⣦⡀⠘⣧⠀⠙⠄⠀⠀⠀⠀⠀⣨⣴⣾⣿⠿⣿⣿⣿⣿⣿⣶⣯⣿⣼⢼⡇⠀⢸⡇⡇⠇"
                   "⢸⢧⠀⣿⡅⢸⣼⡷⣾⣿⡟⠋⣿⠓⢲⣿⣿⣿⡟⠙⣿⠛⢯⡳⡀⠈⠓⠄⡈⠚⠿⣧⣌⢧⠀⠀⠀⠀⠀⣠⣺⠟⢫⡿⠓⢺⣿⣿⣿⠏⠙⣏⠛⣿⣿⣾⡇⢀⡿⢠⠀⡇"
                   "⢸⢸⠀⢹⣷⡀⢿⡁⠀⠻⣇⠀⣇⠀⠘⣿⣿⡿⠁⠐⣉⡀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠉⠓⠳⠄⠀⠀⠀⠀⠋⠀⠘⡇⠀⠸⣿⣿⠟⠀⢈⣉⢠⡿⠁⣼⠁⣼⠃⣼⠀⡇"
                   "⢸⠸⣀⠈⣯⢳⡘⣇⠀⠀⠈⡂⣜⣆⡀⠀⠀⢀⣀⡴⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢽⣆⣀⠀⠀⠀⣀⣜⠕⡊⠀⣸⠇⣼⡟⢠⠏⠀⡇"
                   "⢸⠀⡟⠀⢸⡆⢹⡜⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠋⣾⡏⡇⡎⡇⠀⡇"
                   "⢸⠀⢃⡆⠀⢿⡄⠑⢽⣄⠀⠀⠀⢀⠂⠠⢁⠈⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠄⡐⢀⠂⠀⠀⣠⣮⡟⢹⣯⣸⣱⠁⠀⡇"
                   "⠈⠉⠉⠉⠉⠉⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠉⠉⠉⠁"))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat line (make-string (max 0 (- longest-line (length line))) 32)))
               "\n"))
     'face 'doom-dashboard-banner)))

(setq +doom-dashboard-ascii-banner-fn #'my-weebery-is-always-greater
      fancy-splash-image (concat doom-private-dir "images/logo.svg"))
#+end_src
*** modeline
Make the modeline look a bit nicer.
#+begin_src emacs-lisp
(remove-hook 'doom-modeline-mode-hook #'size-indication-mode)

(after! doom-modeline
  ;; see https://github.com/seagle0128/doom-modeline?tab=readme-ov-file#customize
  (setq doom-modeline-buffer-file-name-style 'auto
        doom-modeline-always-show-macro-register t
        doom-modeline-enable-word-count nil
        doom-modeline-buffer-encoding t
        doom-modeline-major-mode-icon t
        doom-modeline-buffer-modification-icon nil
        doom-modeline-bar-width 0
        doom-modeline-height 30
        doom-modeline-modal nil
        doom-modeline-spc-face-overrides `(:family ,my/mono-font))

  (setq mode-line-right-align-edge 'right-fringe)

  ;; see https://discourse.doomemacs.org/t/how-to-switch-customize-or-write-themes/37#tweak-the-current-theme-3
  (custom-set-faces!
    `(doom-modeline-buffer-file
      :foreground ,(doom-color 'fg-alt)
      :family ,my/sans-serif-font)
    `(mode-line
      :background ,(doom-color 'bg)
      :foreground ,(doom-color 'fg-alt)
      :overline ,(doom-color 'base4)
      :family ,my/sans-serif-font)
    `(mode-line-inactive
      :overline ,(doom-color 'base4)
      :family ,my/sans-serif-font
      :box nil)
    `(mode-line-active
      :foreground ,(doom-color 'fg-alt)
      :box nil)
    '(header-line
      :overline nil))

  ;; make modeline look like vim in terminal
  (unless (display-graphic-p)
    (setq doom-modeline-icon nil)

    (custom-set-faces!
    `(mode-line
      :background ,(doom-color 'bg-alt2)
      :foreground ,(doom-color 'fg))
    '(doom-modeline-buffer-file
      :weight normal))))
#+end_src

We expect the file encoding to be =LF UTF-8= so, only display it in modeline when it's something else.
#+begin_src emacs-lisp
;; copied from https://tecosaur.github.io/emacs-config/config.html#file-encoding
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (and (memq (plist-get (coding-system-plist buffer-file-coding-system) :category)
                                 '(coding-category-undecided coding-category-utf-8))
                           (not (memq (coding-system-eol-type buffer-file-coding-system) '(1 2))))
                t)))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src

Change the filename showed in the modline in an =org-roam= buffer to be =(<date>) <name>.org=.
Only relevant if you have [[+roam2]].
#+begin_src emacs-lisp
;; TODO show the name of the note instead of the name of the file
;; modified from https://tecosaur.github.io/emacs-config/config.html#modeline-file-name
;; (defadvice! doom-modeline--buffer-file-name-roam-aware-a (orig-fun)
;;   :around #'doom-modeline-buffer-file-name ; takes no args
;;   (if (string-match-p (regexp-quote org-roam-directory) (or buffer-file-name ""))
;;       (replace-regexp-in-string
;;        "\\(?:^\\|.*/\\)\\([0-9]\\{4\\}\\)\\([0-9]\\{2\\}\\)\\([0-9]\\{2\\}\\)[0-9]*-"
;;        "(\\1-\\2-\\3) "
;;        (subst-char-in-string ?_ ?  buffer-file-name))
;;     (funcall orig-fun)))
#+end_src
*** tabs
Disable tabs by default and make them toggleable.
#+begin_src emacs-lisp
(use-package! centaur-tabs
  :init
  (remove-hook 'doom-first-file-hook #'centaur-tabs-mode)
  (when (daemonp)
    (remove-hook 'server-after-make-frame-hook #'centaur-tabs-mode))

  (map! :leader
        :prefix "t"
        :desc "Tabs"
        "t" #'centaur-tabs-mode
        :desc "Local tabs"
        "T" #'centaur-tabs-local-mode)
  :config
  (centaur-tabs-change-fonts my/sans-serif-font 140)
  :bind
  (:map evil-normal-state-map
        ("g t" . centaur-tabs-forward)
        ("g T" . centaur-tabs-backward)))
#+end_src
*** unicode
#+begin_src emacs-lisp
(after! unicode
  (if (featurep :system 'macos)
      (setq doom-symbol-font (font-spec :family "Symbola"))))
#+end_src
*** zen
Use =doom-variable-pitch-font= in the following modes:
- =org-mode=
- =org-roam-mode= (only relevant if you have [[+roam2]])
- =LaTeX-mode= (only relevant if you have [[latex]])
- =doom-docs-org-mode=
#+begin_src emacs-lisp
;; modified from https://discourse.doomemacs.org/t/cant-size-doom-variable-pitch-font/4572/2
(use-package! mixed-pitch
    :hook ((org-mode      . mixed-pitch-mode)
           (org-roam-mode . mixed-pitch-mode)
           (LaTeX-mode    . mixed-pitch-mode)
           (doom-docs-org-mode . mixed-pitch-mode))
    :config
    (setq mixed-pitch-set-height t
          variable-pitch-serif-font doom-variable-pitch-font)

    (pushnew! mixed-pitch-fixed-pitch-faces
              'warning
              'org-drawer 'org-cite-key 'org-list-dt 'org-hide
              'corfu-default 'font-latex-math-face)

    (set-face-attribute 'variable-pitch nil :height 1.1))
#+end_src

Reduce text indent in =org= buffers caused by =mixed-pitch-mode=.
#+begin_src emacs-lisp
;; copied from https://tecosaur.github.io/emacs-config/config.html#reduced-text-indent
(defadvice! +org-indent--reduced-text-prefixes ()
  :after #'org-indent--compute-prefixes
  (setq org-indent--text-line-prefixes
        (make-vector org-indent--deepest-level nil))
  (when (> org-indent-indentation-per-level 0)
    (dotimes (n org-indent--deepest-level)
      (aset org-indent--text-line-prefixes
            n
            (org-add-props
                (concat (make-string (* n (1- org-indent-indentation-per-level))
                                     ?\s)
                        (if (> n 0)
                             (char-to-string org-indent-boundary-char)
                          "\u200b"))
                nil 'face 'org-indent)))))
#+end_src
*** workspaces
#+begin_src emacs-lisp
;; TODO use unicode symbols for [1], [2], ...
(after! persp-mode
  (custom-set-faces!
    `(+workspace-tab-face
      :family ,my/sans-serif-font)
    `(+workspace-tab-selected-face
      :box (:color ,(doom-color 'fg-alt)
            :line-width 1
            :style nil)
      :background ,(doom-color 'fg-alt)
      :foreground ,(doom-color 'bg-alt)
      :family ,my/sans-serif-font
      :weight bold)))
#+end_src
*** other
**** spacious-padding
Add padding to emacs frames and windows with [[https://github.com/protesilaos/spacious-padding][spacious-padding]].
#+begin_src emacs-lisp
;; https://protesilaos.com/emacs/spacious-padding
(use-package! spacious-padding
  :ensure t
  :config
  (setq spacious-padding-widths
        '( :internal-border-width 20
           :header-line-width 8
           :mode-line-width 8
           :tab-width 4 ;; ?
           :right-divider-width 15
           :left-fringe-width 8))
  (spacious-padding-mode 1))
#+end_src
**** rainbow-delimiters
Make rainbow delimiters toggleable.
#+begin_src emacs-lisp
;; https://github.com/orgs/doomemacs/projects/5/views/1?pane=issue&itemId=117610828
(map! :leader
      :prefix "t"
      :desc "Rainbow delimiters"
      "(" #'rainbow-delimiters-mode)
#+end_src
** :editor
*** evil
Set some =evil= variables.
#+begin_src emacs-lisp
(after! evil
  (setq evil-move-cursor-back nil     ; don't move the block cursor when toggling insert mode
        evil-kill-on-visual-paste nil ; don't put overwritten text in the kill ring
        evil-want-fine-undo t
        evil-move-beyond-eol t
        ;; evil-want-minibuffer t
        +evil-want-o/O-to-continue-comments nil)

  (map! :nv "~" #'repeat))
#+end_src
*** lispy
Add a toggle for =lispy-mode=.
#+begin_src emacs-lisp
(defun my/toggle-lispy ()
  "Toggle lispy-mode: enable if off, disable lispy & lispyville if on. Echo the new state in the minibuffer."
  (interactive)
  (if lispy-mode
      (progn
        (lispy-mode -1)
        (when (bound-and-true-p lispyville-mode)
          (lispyville-mode -1))
        (message "Lispy mode disabled"))
    (lispy-mode 1)
    (message "Lispy mode enabled")))

(map! :leader
      :prefix "t"
      :desc "Lispy"
      "L" #'my/toggle-lispy)
#+end_src
** :emacs
*** dired
Set =quick-access-entries= for =dirvish=.
Ensure [[https://github.com/alexluigit/dirvish/blob/main/docs/CUSTOMIZING.org#install-dependencies-for-an-enhanced-preview-experience][these]] programs are installed to enable file previews.
#+begin_src emacs-lisp
(setq dired-mouse-drag-files t
      mouse-drag-and-drop-region-cross-program t)

(after! dired-x
  (setq dired-omit-files ; hide "dotfiles"
        (concat dired-omit-files "\\|^\\..*$")))

(after! dirvish
  (setq dirvish-attributes
        (append
         '(vc-state subtree-state nerd-icons collapse)
         '(git-msg file-size)))

  (setq! dirvish-quick-access-entries
         `(("h" "~/" "Home")
           ("c" "~/Developer/" "Code")
           ("d" "~/Downloads/" "Downloads")
           ("g" "~/GitHub/" "GitHub")
           ("t" "~/.Trash/" "Trash")
           ("o" "~/OneDrive - Stellenbosch University/"  "OneDrive")
            ;; - `scp` ensures large files are transferred out of band
            ;;    via `scp` rather than encoded in the shell session.
            ;; - `x` ensures the session is opened with `/bin/sh -i`
            ;;    via `-o RemoteCommand`.
           ("n" "/scpx:NARGA:" "NARGA"))))

(map! :leader
      :prefix "o"
      :desc "Dirvish Quick Access"
      "q" #'dirvish-quick-access)
#+end_src
** :term
*** eshell
Customise eshell:
- Set custom aliases
- Set custom prompt
- Add icons to =eshell/ls= and make links clickable
#+begin_src emacs-lisp
(after! eshell
  ;; ALIASES
  (set-eshell-alias!
   "ll" "ls -lAh $*"

   ;; git
   "gs" "git-st"
   "ga" "git add $1"
   "gb" "git branch $1"
   "gbd" "git branch -D $1"
   "gcb" "git checkout -b $1"
   "gch" "git checkout $1"
   "gc" "git commit -m $1"
   "gp" "git pull"
   "gpu" "git push"

   ;; homebrew
   "bs" "brew search $1"
   "bi" "brew install $*"
   "bic" "brew install --cask $*"
   "bu" "brew update && brew upgrade")

  ;; PROMPT
  (custom-set-faces!
    `(+eshell-prompt-pwd
      :foreground ,(doom-color 'teal)
      :weight bold)
    `(+eshell-prompt-git-branch
      :foreground ,(doom-color 'violet)))

  ;; modified from https://github.com/doomemacs/doomemacs/blob/master/modules/term/eshell/autoload/prompts.el
  (defun my/+eshell--current-git-branch ()
    (cl-destructuring-bind (status . output)
        (doom-call-process "git" "symbolic-ref" "-q" "--short" "HEAD")
      (if (equal status 0)
          (format " [ %s]" output)
        (cl-destructuring-bind (status . output)
            (doom-call-process "git" "describe" "--all" "--always" "HEAD")
          (if (equal status 0)
              (format " [ %s]" output)
            "")))))

  (defun my/eshell-default-prompt-fn ()
    (concat (if (bobp) "" "\n")
            (let ((pwd (eshell/pwd)))
              (propertize (if (equal pwd "~")
                              pwd (abbreviate-file-name pwd))
                          'face '+eshell-prompt-pwd))
            (propertize (my/+eshell--current-git-branch)
                        'face '+eshell-prompt-git-branch)
            (propertize "\nλ" 'face (if (zerop eshell-last-command-status) 'success 'error))
            " "))

  (setq eshell-prompt-function #'my/eshell-default-prompt-fn)

  ;; ICONS
  ;; modified from https://www.reddit.com/r/emacs/comments/xboh0y/how_to_put_icons_into_eshell_ls/
  (defun lem-eshell-prettify (file)
    "Add features to listings in `eshell/ls' output.
     The features are:
     1. Add decoration like 'ls -F':
        - Mark directories with a `/'
        - Mark executables with a `*'
     2. Make each listing into a clickable link to open the
        corresponding file or directory.
     3. Add icons (requires `nerd-icons')
     This function is meant to be used as advice around
     `eshell-ls-annotate', where FILE is the cons describing the file."
    (let* ((name (car file))
           (icon (if (eq (cadr file) t)
                     (propertize (nerd-icons-icon-for-dir name) 'face 'eshell-ls-directory)
                   (nerd-icons-icon-for-file name)))
           (suffix
            (cond
             ;; Directory
             ((eq (cadr file) t) "/")
             ;; Executable
             ((and (/= (user-uid) 0) ; root can execute anything
                   (eshell-ls-applicable (cdr file) 3 #'file-executable-p (car file)))
              "*"))))
      (cons
       (concat icon " "
               (propertize name
                           'keymap eshell-ls-file-keymap
                           'mouse-face 'highlight
                           'file-name (expand-file-name (substring-no-properties (car file)) default-directory))
               (when (and suffix (not (string-suffix-p suffix name)))
                 (propertize suffix 'face 'shadow)))
       (cdr file))))

  (defun eshell-ls-file-at-point ()
    "Get the full path of the Eshell listing at point."
    (get-text-property (point) 'file-name))

  (defun eshell-ls-find-file ()
    "Open the Eshell listing at point."
    (interactive)
    (find-file (eshell-ls-file-at-point)))

  (defun eshell-ls-delete-file ()
    "Delete the Eshell listing at point."
    (interactive)
    (let ((file (eshell-ls-file-at-point)))
      (when (yes-or-no-p (format "Delete file %s?" file))
        (delete-file file 'trash))))

  (defvar eshell-ls-file-keymap
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "RET") #'eshell-ls-find-file)
      (define-key map (kbd "<return>") #'eshell-ls-find-file)
      (define-key map [mouse-1] #'eshell-ls-find-file)
      (define-key map (kbd "D") #'eshell-ls-delete-file)
      map)
    "Keys in effect when point is over a file from `eshell/ls'.")

  (advice-add #'eshell-ls-annotate :filter-return #'lem-eshell-prettify))
#+end_src
** :tools
*** debugger
#+begin_src emacs-lisp
(after! dape
  (setq dape-breakpoint-margin-string "●")) ;; or use •
#+end_src
*** llm
Set up =gptel= to use copilot and install some tools from the =llm-tool-collection= package.
#+begin_src emacs-lisp
(after! gptel
  (setq gptel-model 'gpt-4.1
        gptel-backend (gptel-make-gh-copilot "Copilot")
        gptel-default-mode 'org-mode)

  ;; see https://github.com/karthink/gptel/wiki/Tools-collection
  (gptel-make-tool
   :function (lambda (command &optional working_dir)
               (with-temp-message (format "Executing command: `%s`" command)
                 (let ((default-directory (if (and working_dir (not (string= working_dir "")))
                                              (expand-file-name working_dir)
                                            default-directory)))
                   (shell-command-to-string command))))
   :name "run_command"
   :description "Executes a shell command and returns the output as a string. IMPORTANT: This tool allows execution of arbitrary code; user confirmation will be required before any command is run."
   :args (list
          '(:name "command"
            :type string
            :description "The complete shell command to execute.")
          '(:name "working_dir"
            :type string
            :description "Optional: The directory in which to run the command. Defaults to the current directory if not specified."))
   :category "command"
   :confirm t
   :include t)

  (mapcar (apply-partially #'apply #'gptel-make-tool)
          (llm-tool-collection-get-all)))
#+end_src
*** lsp +eglot
Change some of =eglot='s faces.
#+begin_src emacs-lisp
(after! eglot
  (custom-set-faces!
    `(eglot-inlay-hint-face
      :foreground ,(doom-color 'base5)
      :family ,my/sans-serif-font)))
#+end_src

Improve =eglot= performance.
*NOTE*: Requires building [[https://github.com/blahgeek/emacs-lsp-booster?tab=readme-ov-file#obtain-or-build-emacs-lsp-booster][emacs-lsp-booster]].
#+begin_src emacs-lisp
(use-package! eglot-booster
  :after eglot
  :config (eglot-booster-mode))
#+end_src
*** pdf
#+begin_src emacs-lisp
;; TODO add continuous scroll
(add-hook 'pdf-view-mode-hook #'pdf-view-midnight-minor-mode)

(map! :map pdf-view-mode-map
      :localleader
      (:prefix ("h" . "history")
       :desc "Go forward in history"
       "f" #'pdf-history-forward
       :desc "Go backward in history"
       "b" #'pdf-history-backward))
#+end_src
** :lang
*** cc
Set indentation level for =cc-mode= to 2 and fix issue where two new lines are inserted after ={=.
#+begin_src emacs-lisp
(after! cc-mode
  (setq c-basic-offset 2))

(after! eglot
  (add-hook! 'eglot-managed-mode-hook :append
    (defun +eglot--rm-eglot--post-self-insert-hook ()
      ;; remove eglot’s post-self-insert-hook in current buffer
      (remove-hook 'post-self-insert-hook #'eglot--post-self-insert-hook t))))
#+end_src
*** java
Set indentation level for =java-mode= to 2.
#+begin_src emacs-lisp
(after! java-mode
  (setq c-basic-offset 2))
#+end_src
*** python +lsp
Requires [[lsp +eglot]] and requires =pyright= to be installed on your machine.
Install with ~npm install -g pyright~.
#+begin_src emacs-lisp
(after! eglot
  (add-to-list 'eglot-server-programs '(python-mode . ("pyright-langserver" "--stdio"))))

(add-hook! python-mode
  (setq python-shell-interpreter "python3.11"
        doom-modeline-env-python-executable "python3.11"))
#+end_src
*** latex +cdlatex
Enable auomatic insertion of braces after sub/superscript in =LaTeX-math-mode=.
This used to the default behaviour in doom but was changed in commit [[https://github.com/doomemacs/doomemacs/commit/57fcd95e7dd61fcfc235293d7909e7b008466113][57fcd95]].
#+begin_src emacs-lisp
(setq TeX-electric-sub-and-superscript t)
#+end_src

My CDLaTeX templates.
#+begin_src emacs-lisp
(after! cdlatex
  (map! :map cdlatex-mode-map
        :i "TAB" #'cdlatex-tab)

  (setq cdlatex-math-symbol-alist ;; expand when prefixed with `
        ;; TODO change prefix key to something like ;
        '((?' ("`"))
          (?e ("\\varepsilon" "\\epsilon"))
          (?f ("\\varphi" "\\phi"))
          (?0 ("\\varnothing" "\\emptyset"))
          (?> ("\\to" "\\implies"))
          (?= ("\\iff" "\\equiv"))
          (?| ("\\mid" "\\vert"))
          (?: ("\\coloneqq")))
        cdlatex-math-modify-alist ;; modify text with '
        '((?b "\\mathbb" nil t nil nil)
          (?c "\\mathcal" nil t nil nil)
          (?f "\\mathbf" nil t nil nil)
          (?m "\\mathrm" nil t nil nil)
          (?r "\\mathrel" nil t nil nil)
          (?s "\\mathsf" nil t nil nil)
          (?o "\\operatorname" nil t nil nil))
        cdlatex-command-alist ;; expand with <TAB>
        '(("eqn" "Insert an EQUATION* environment template" "" cdlatex-environment ("equation*") t nil)
          ("aln" "Insert an ALIGN* environment template" "" cdlatex-environment ("align*") t nil)
          ("sum" "Insert \\sum\\limits_{}^{}" "\\sum\\limits_{?}^{}" cdlatex-position-cursor nil nil t)
          ("prod" "Insert \\prod\\limits_{}^{}" "\\prod\\limits_{?}^{}" cdlatex-position-cursor nil nil t)
          ("bun" "Insert \\bigcup\\limits_{}^{}" "\\bigcup\\limits_{?}^{}" cdlatex-position-cursor nil nil t)
          ("bin" "Insert \\bigcap\\limits_{}^{}" "\\bigcap\\limits_{?}^{}" cdlatex-position-cursor nil nil t)
          ("lim" "Insert \\lim_\\limits{{} \\to {}}" "\\lim_\\limits{{?} \\to {}}" cdlatex-position-cursor nil nil t)
          ("sr" "Insert {}^2" "{?}^2" cdlatex-position-cursor nil nil t)
          ("cb" "Insert {}^3" "{?}^3" cdlatex-position-cursor nil nil t)
          ("op" "Insert \\operatorname{}()" "\\operatorname{?}()" cdlatex-position-cursor nil nil t))))
#+end_src
*** org
**** org-mode
Set some =org= variables.
#+begin_src emacs-lisp
(setq org-directory "~/Documents/Org"
      org-use-property-inheritance t ; fix weird issue with src blocks
      org-startup-with-inline-images t
      org-edit-src-content-indentation 0)

;; FIXME blurry previews when using #+attr_org: :width
;; (setq org-image-actual-width (/ (display-pixel-width) 3)) ; set images to a third of the width of the screen
      ;; org-image-actual-width (min (/ (display-pixel-width) 3) 800)
#+end_src

Customise =org= faces to for links and src blocks and scale headings.
#+begin_src emacs-lisp
(after! org
  (custom-set-faces!
    `((org-link)
      :weight normal
      :underline nil)
    ;; `((highlight)
    ;;   :underline t
    ;;   :foreground nil
    ;;   :foreground ,(face-attribute 'highlight :background)
    ;;   :background nil)

    ;; scale headings
    `((org-document-title)
      :foreground ,(doom-color 'fg)
      :height 1.3 :weight bold)
    `((org-level-1)
      ;; :foreground ,(doom-color 'green)
      :foreground ,(face-attribute 'outline-1 :foreground)
      :height 1.1 :weight medium)
    `((org-level-2)
      ;; :foreground ,(doom-color 'yellow)
      :foreground ,(face-attribute 'outline-2 :foreground)
      :weight medium)
    `((org-level-3)
      ;; :foreground ,(doom-color 'dark-yellow)
      :foreground ,(face-attribute 'outline-3 :foreground)
      :weight medium)
    `((org-level-4)
      ;; :foreground ,(doom-color 'orange)
      :foreground ,(face-attribute 'outline-4 :foreground)
      :weight medium)
    `((org-level-5)
      ;; :foreground ,(doom-color 'red)
      :foreground ,(face-attribute 'outline-5 :foreground)
      :weight medium)))
#+end_src
**** org-latex
Use native highlighting for =LaTeX=  related syntax in =org= buffers.
By using native highlighting the =org-face= gets added which we want to avoid.
#+begin_src emacs-lisp
(setq org-highlight-latex-and-related '(native script))

(after! org-src
  (add-to-list 'org-src-block-faces
               `("latex" (:background ,(doom-color 'bg)
                          :extend t))))
#+end_src

Enable =evil-tex-mode= in LaTeX source blocks.
Requires [[latex]] and [[evil]] to be enabled.
#+begin_src emacs-lisp
(add-hook! 'org-src-mode-hook
  (when (string= major-mode "latex-mode")
    (evil-tex-mode 1)))
#+end_src

Set up =LaTeX= previews in =org= buffers.
#+begin_src emacs-lisp
;; TODO enable latex previews in org-roam and latex buffers (use xenops)
(after! org
  (dolist (pkg '("amsmath" "amssymb" "mathtools" "mathrsfs"))
    (add-to-list 'org-latex-packages-alist `("" ,pkg t))))

;; modified from https://abode.karthinks.com/org-latex-preview/
(use-package! org-latex-preview
  :after org
  :hook (org-mode . org-latex-preview-auto-mode)
  :init (setq org-startup-with-latex-preview t)
  :config
  (plist-put org-latex-preview-appearance-options
             ;; :page-width 0.8)
             :page-width 1.0)

  (setq org-latex-preview-auto-ignored-commands
        '(next-line previous-line mwheel-scroll ultra-scroll
          scroll-up-command scroll-down-command
          evil-scroll-up evil-scroll-down evil-scroll-line-up evil-scroll-line-down)
        org-latex-preview-numbered t
        org-latex-preview-live t
        org-latex-preview-live-debounce 0.25)

  ;; code for centering LaTeX previews -- a terrible idea
  (defun my/org-latex-preview-uncenter (ov)
    (overlay-put ov 'before-string nil))
  (defun my/org-latex-preview-recenter (ov)
    (overlay-put ov 'before-string (overlay-get ov 'justify)))
  (defun my/org-latex-preview-center (ov)
    (save-excursion
      (goto-char (overlay-start ov))
      (when-let* ((elem (org-element-context))
                  ((or (eq (org-element-type elem) 'latex-environment)
                       (string-match-p "^\\\\\\[" (org-element-property :value elem))))
                  (img (overlay-get ov 'display))
                  (prop `(space :align-to (- center (0.55 . ,img))))
                  (justify (propertize " " 'display prop 'face 'default)))
        (overlay-put ov 'justify justify)
        (overlay-put ov 'before-string (overlay-get ov 'justify)))))
  (define-minor-mode org-latex-preview-center-mode
    "Center equations previewed with `org-latex-preview'."
    :global nil
    (if org-latex-preview-center-mode
        (progn
          (add-hook 'org-latex-preview-overlay-open-functions
                    #'my/org-latex-preview-uncenter nil :local)
          (add-hook 'org-latex-preview-overlay-close-functions
                    #'my/org-latex-preview-recenter nil :local)
          (add-hook 'org-latex-preview-overlay-update-functions
                    #'my/org-latex-preview-center nil :local))
      (remove-hook 'org-latex-preview-overlay-close-functions
                   #'my/org-latex-preview-recenter)
      (remove-hook 'org-latex-preview-overlay-update-functions
                   #'my/org-latex-preview-center)
      (remove-hook 'org-latex-preview-overlay-open-functions
                   #'my/org-latex-preview-uncenter))))
#+end_src
**** +pretty
***** org-modern
Some eye candy in =org= buffers provided.
#+begin_src emacs-lisp
;; modified from https://sophiebos.io/posts/beautifying-emacs-org-mode/
(after! org-modern
  (setq org-auto-align-tags t
        org-tags-column 0
        org-fold-catch-invisible-edits 'show-and-error
        org-special-ctrl-a/e t
        org-insert-heading-respect-content t

        org-modern-table nil
        org-modern-todo nil
        org-modern-priority nil
        org-modern-progress 6

        ;; agenda
        org-agenda-tags-column 0
        org-agenda-block-separator ?─
        org-agenda-time-grid
        '((daily today require-timed)
          (800 1000 1200 1400 1600 1800 2000)
          " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
        org-agenda-current-time-string
        "⭠ now ─────────────────────────────────────────────────"

        ;; text replacements
        org-modern-fold-stars
        `(("◉" . "○" )
          ("◈" . "◇" )
          ("◉" . "○" )
          ("◈" . "◇" )
          ("◉" . "○" ))
        org-modern-checkbox
        ;; requires nerd font
        '((88 . "󰄵")
          (45 . "󰡖")
          (32 . "󰄱"))
        org-modern-list
        '((43 . "•")
          (45 . "–")
          (42 . "↪")))

  (custom-set-faces!
    `(org-modern-tag
      :background ,(doom-color 'fg-alt)
      :foreground ,(doom-color 'bg-alt)
      :family ,my/sans-serif-font
      :height 0.7)))
#+end_src
***** org-appear
#+begin_src emacs-lisp
(after! org-appear
  (setq org-hide-emphasis-markers t
        org-pretty-entities nil
        ;; org-appear-autoentities t
        org-appear-autosubmarkers t
        org-appear-inside-latex t
        org-appear-autolinks 'just-brackets))
#+end_src
***** other
Modern block styling from [[https://github.com/jdtsmith/org-modern-indent][org-modern-indent]].
#+begin_src emacs-lisp
;; (use-package! org-modern-indent
;;   :hook (org-mode . org-modern-indent-mode)
;;   :config
;;   (custom-set-faces!
;;     `((org-block-begin-line)
;;       :inherit default
;;       :background nil)
;;     `((org-block-end-line)
;;       :inherit org-block-begin-line
;;       :background nil))

;;   (setq org-modern-block-name
;;         '((t . t)
;;           ("src" "──»" "──«")
;;           ("example" "─»»" "─««")
;;           ("quote" "─ ❝" "─ ❞")
;;           ("export" "⏩" "⏪"))))
#+end_src

Align tables with images and hidden markup correctly with [[https://github.com/casouri/valign][valign]].
*NOTE*: Can be slow, especially with large =org= files.
#+begin_src emacs-lisp
(use-package! valign
  :hook (org-mode . valign-mode)
  :config
  (setq valign-fancy-bar t))
#+end_src
**** +dragndrop
Customise drag-and-drop support for images and files, insert them into the =images/= directory.
#+begin_src emacs-lisp
(use-package! org-download
  :defer t
  :init
  (setq-default org-download-image-dir "images")
  :config
  (setq org-download-method 'directory
        org-download-link-format"[[file:images/%s]]\n"
        org-download-heading-lvl nil))

(map! :map org-mode-map
      :localleader
      :prefix "a"
      :desc "Rename image at point"
      "C" #'org-download-rename-at-point)
#+end_src
**** +roam2
Set up =org-roam= and =org-roam-ui= along with their keybindings that have the [[kbd:][<leader> r]]  prefix.
#+begin_src emacs-lisp
;; TODO set up capture templates
(use-package! org-roam
  :defer t
  :config
  (setq org-roam-directory (file-truename "~/Notes")
        org-roam-db-location (file-truename "~/Notes/org-roam.db")
        org-attach-id-dir "assets/")
  (org-roam-db-autosync-enable))

(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t
        org-roam-mode-sections
        (list #'org-roam-backlinks-section
              #'org-roam-reflinks-section
              #'org-roam-unlinked-references-section)))

;; custom org-roam functions
(defun my/org-roam--after-point ()
  "If in evil normal state and not at EOL, move one char forward."
  (when (and (bound-and-true-p evil-mode)
             (evil-normal-state-p)
             (not (eolp)))
    (forward-char)))
(defun my/org-roam-insert-lowercase ()
  "Insert an org-roam link after point, forcing the link text to lower-case."
  (interactive)
  (let ((org-roam-node-formatter
         (lambda (node) (downcase (org-roam-node-title node)))))
    (my/org-roam--after-point)
    (call-interactively #'org-roam-node-insert)))
(defun my/org-roam-insert-custom-title ()
  "Pick a node, then prompt for a verbatim link description."
  (interactive)
  (my/org-roam--after-point)
  (let* ((node (org-roam-node-read))
         (desc (read-string "Description: "))
         (link (org-link-make-string
                (concat "id:" (org-roam-node-id node))
                desc)))
    (insert link)
    (org-roam-link-replace-at-point link)
    (run-hooks 'org-roam-insert-node-hook)
    (forward-char)))

;; copied from https://hieuphay.com/doom-emacs-config/#customizing-main-interface
(defun my/org-roam-node-find-by-mtime ()
  "Find a node by last modified date."
  (interactive)
  (find-file
   (org-roam-node-file
    (org-roam-node-read nil nil #'org-roam-node-read-sort-by-file-mtime))))

(map! :map evil-org-mode-map
      :leader
      (:prefix ("r" . "roam")
       :desc "Add alias"
       "a" #'org-roam-alias-add
       :desc "Remove alias"
       "A" #'org-roam-alias-remove
       :desc "Toggle roam buffer"
       "b" #'org-roam-buffer-toggle
       :desc "Find node"
       "f" #'my/org-roam-node-find-by-mtime
       :desc "Insert node"
       "i" #'my/org-roam-insert-lowercase
       :desc "Insert node (prompt title)"
       "I" #'my/org-roam-insert-custom-title
       :desc "Add tag"
       "t" #'org-roam-tag-add
       :desc "Remove tag"
       "T" #'org-roam-tag-remove
       :desc "Visit node"
       "v" #'org-roam-node-visit
       :desc "Open ORUI"
       "u" #'org-roam-ui-open))
#+end_src
