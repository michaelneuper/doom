#+title: Doom Emacs Config
#+author: Michael Neuper

#+begin_src emacs-lisp
;;; config.el -*- lexical-binding: t; -*-
#+end_src

This is my literate doom emacs config.
[[Basic]] sets up some basic emacs and doom configurations.
[[Doom Modules]] contains the configuration for doom's modules ordered by the same order as in =init.el=.
This section also contains configuration for other packages in =packages.el= under headings that seem appropriate.

* Contents :toc:
- [[#basic][Basic]]
  - [[#defaults][Defaults]]
  - [[#visual-enchancements][Visual Enchancements]]
- [[#doom-modules][Doom Modules]]
  - [[#completion][:completion]]
  - [[#ui][:ui]]
  - [[#editor][:editor]]
  - [[#emacs][:emacs]]
  - [[#tools][:tools]]
  - [[#lang][:lang]]

* Basic
** Defaults
*** Speed
Make emacs faster.
#+begin_src emacs-lisp
(use-package! gcmh
  :init
  (setq gcmh-idle-delay 5
        gcmh-high-cons-threshold (* 256 1024 1024))  ; 256MB during idle
  :config
  (gcmh-mode 1))

(setq gc-cons-threshold 200000000) ; previous 33554432
#+end_src
*** Basic
#+begin_src emacs-lisp
;; credentials
(setq user-full-name "Michael Neuper"
      user-mail-address "michael@michaelneuper.com")

;; autosave and backup
(setq auto-save-default t
      make-backup-files t)

;; kill emacs without confiming
(setq confirm-kill-emacs nil)

;; remap <localleader> from SPC m to SPC l
(setq doom-localleader-key "SPC l"
      doom-localleader-alt-key "M-SPC l")
#+end_src
Some =which-key= adjustments.
#+begin_src emacs-lisp
(setq which-key-idle-delay 0.5
      which-key-allow-multiple-replacements t)

;; copied from https://tecosaur.github.io/emacs-config/config.html#which-key
(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))))
#+end_src
*** macOS
Some macOS specific settings.
#+begin_src emacs-lisp
(if (featurep :system 'macos)
    (setq mac-command-modifier 'meta
          mac-option-modifier 'none
          mac-right-option-modifier 'super
          ns-use-proxy-icon nil ; disable file icon in titlebar
          ns-use-native-fullscreen t))
#+end_src
** Visual Enchancements
*** Theme & Fonts
#+ATTR_ORG: :width 500
[[file:images/gruvbox-colorscheme.png]]
#+begin_src emacs-lisp
(setq doom-theme 'doom-gruvbox)

(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 15)
      doom-serif-font (font-spec :family "Helvetica" :size 15.5)
      ;; doom-variable-pitch-font (font-spec :family "Latin Modern Roman" :size 15.5)
      doom-variable-pitch-font (font-spec :family "Inter" :size 14.5)
      doom-emoji-font (font-spec :family "Apple Color Emoji" :size 15.5)
      doom-symbol-font (font-spec :family "Symbola"))
#+end_src
*** Lines
Enable relative line numbers and make their slant normal (not italic).
#+begin_src emacs-lisp
;; FIXME incorrect numbers when org headings are folded
(setq display-line-numbers-type 'relative)
(setq-default line-spacing 0.1)

(add-hook! display-line-numbers-mode
  (custom-set-faces!
    '(line-number :slant normal)
    '(line-number-current-line :slant normal)))
#+end_src

Disable highlighting of the current line.
#+begin_src emacs-lisp
(setq global-hl-line-modes nil)
#+end_src

Display a fill indicator at 80 characters in =prog-mode=.
#+begin_src emacs-lisp
(setq display-fill-column-indicator-column 80)
(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+end_src
*** Window
Start emacs in a 100x40 window.
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(width . 100))
(add-to-list 'default-frame-alist '(height . 40))
#+end_src

Format the title.
#+begin_src emacs-lisp
;; copied from https://hieuphay.com/doom-emacs-config/#some-good-defaults
;; (setq frame-title-format
;;       '(""
;;         (:eval
;;          (if (s-contains-p org-roam-directory (or buffer-file-name ""))
;;              (replace-regexp-in-string
;;               ".*/[0-9]*-?" "☰ "
;;               (subst-char-in-string ?_ ?  buffer-file-name))
;;            "%b"))
;;         (:eval
;;          (let ((project-name (projectile-project-name)))
;;            (unless (string= "-" project-name)
;;              (format (if (buffer-modified-p)  " ◉ %s" " ● %s") project-name))))))

(setq frame-title-format nil) ; no title
#+end_src
* Doom Modules
** :completion
*** corfu
Disable corfu's auto-popups and preselect the first candidate.
#+begin_src emacs-lisp
(after! corfu
  (setq corfu-auto nil
        corfu-preselect 'first
        +corfu-want-tab-prefer-expand-snippets t))
#+end_src
*** other
**** copilot
Add keybindings for [[https:https://github.com/copilot-emacs/copilot.el][copilot]] and [[https://github.com/chep/copilot-chat.el][copilot-chat]] with [[kbd:][<leader> e]]  prefix.
#+begin_src emacs-lisp
(after! (evil copilot)
  (evil-define-key 'insert 'global (kbd "<tab>") 'copilot-accept-completion))

(map! :leader
      (:prefix ("e" . "copilot")
       :desc "Enable Copilot Mode"
       "c" #'copilot-mode
       :desc "Display Chat Window"
       "d" #'copilot-chat-display
       :desc "Explain Selected Code"
       "e" #'copilot-chat-explain
       :desc "Review Selected Code"
       "r" #'copilot-chat-review
       :desc "Fix Selected Code"
       "f" #'copilot-chat-fix
       :desc "Optimize Selected Code"
       "o" #'copilot-chat-optimize
       :desc "Write Test for Code"
       "t" #'copilot-chat-test
       :desc "Add Current Buffer"
       "a" #'copilot-chat-add-current-buffer
       :desc "Document Selected Code"
       "D" #'copilot-chat-doc
       :desc "Reset Chat History"
       "R" #'copilot-chat-reset
       :desc "Remove Current Buffer"
       "x" #'copilot-chat-del-current-buffer))
#+end_src
** :ui
*** deft
#+begin_src emacs-lisp
(after! deft
  (setq deft-recursive t
        deft-use-filter-string-for-filename t
        deft-default-extension "org"
        deft-directory org-roam-directory))

(map! :leader
      :prefix "r"
      :desc "Search with deft"
      "s" #'deft)
#+end_src
*** doom-dashboard
Customise the dashboard.
#+ATTR_ORG: :width 350
[[file:images/dashboard.png]]
#+begin_src emacs-lisp
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-footer)

;; copied from https://github.com/emacs-dashboard/emacs-dashboard/blob/master/dashboard-widgets.el
(defcustom my/dashboard-footer-messages
  '("The one true editor, Emacs!"
    "Who the hell uses VIM anyway? Go Evil!"
    "Free as free speech, free as free Beer"
    "Happy coding!"
    "Vi Vi Vi, the editor of the beast"
    "Welcome to the church of Emacs"
    "While any text editor can save your files, only Emacs can save your soul"
    "I showed you my source code, pls respond")
  "A list of messages, one of which dashboard chooses to display.")

;; modified from https://discourse.doomemacs.org/t/how-to-change-your-splash-screen/57
(add-hook! '+doom-dashboard-functions :append
  (let* ((icon (propertize  #(" " 0 1 (display (height 1.5))) 'face `(:foreground ,(doom-color 'grey))))
         (msg  (nth (random (length my/dashboard-footer-messages))
                    my/dashboard-footer-messages))
         (line (concat icon msg)))
    (insert "\n" (+doom-dashboard--center +doom-dashboard--width line) "\n"))
  (setq mode-line-format nil)
  (hl-line-mode 0)
  (read-only-mode +1))

(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))

(defun my-weebery-is-always-greater ()
  (let* ((banner '("⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀"
                   "⢸⠉⣹⠋⠉⢉⡟⢩⢋⠋⣽⡻⠭⢽⢉⠯⠭⠭⠭⢽⡍⢹⡍⠙⣯⠉⠉⠉⠉⠉⣿⢫⠉⠉⠉⢉⡟⠉⢿⢹⠉⢉⣉⢿⡝⡉⢩⢿⣻⢍⠉⠉⠩⢹⣟⡏⠉⠹⡉⢻⡍⡇"
                   "⢸⢠⢹⠀⠀⢸⠁⣼⠀⣼⡝⠀⠀⢸⠘⠀⠀⠀⠀⠈⢿⠀⡟⡄⠹⣣⠀⠀⠐⠀⢸⡘⡄⣤⠀⡼⠁⠀⢺⡘⠉⠀⠀⠀⠫⣪⣌⡌⢳⡻⣦⠀⠀⢃⡽⡼⡀⠀⢣⢸⠸⡇"
                   "⢸⡸⢸⠀⠀⣿⠀⣇⢠⡿⠀⠀⠀⠸⡇⠀⠀⠀⠀⠀⠘⢇⠸⠘⡀⠻⣇⠀⠀⠄⠀⡇⢣⢛⠀⡇⠀⠀⣸⠇⠀⠀⠀⠀⠀⠘⠄⢻⡀⠻⣻⣧⠀⠀⠃⢧⡇⠀⢸⢸⡇⡇"
                   "⢸⡇⢸⣠⠀⣿⢠⣿⡾⠁⠀⢀⡀⠤⢇⣀⣐⣀⠀⠤⢀⠈⠢⡡⡈⢦⡙⣷⡀⠀⠀⢿⠈⢻⣡⠁⠀⢀⠏⠀⠀⠀⢀⠀⠄⣀⣐⣀⣙⠢⡌⣻⣷⡀⢹⢸⡅⠀⢸⠸⡇⡇"
                   "⢸⡇⢸⣟⠀⢿⢸⡿⠀⣀⣶⣷⣾⡿⠿⣿⣿⣿⣿⣿⣶⣬⡀⠐⠰⣄⠙⠪⣻⣦⡀⠘⣧⠀⠙⠄⠀⠀⠀⠀⠀⣨⣴⣾⣿⠿⣿⣿⣿⣿⣿⣶⣯⣿⣼⢼⡇⠀⢸⡇⡇⠇"
                   "⢸⢧⠀⣿⡅⢸⣼⡷⣾⣿⡟⠋⣿⠓⢲⣿⣿⣿⡟⠙⣿⠛⢯⡳⡀⠈⠓⠄⡈⠚⠿⣧⣌⢧⠀⠀⠀⠀⠀⣠⣺⠟⢫⡿⠓⢺⣿⣿⣿⠏⠙⣏⠛⣿⣿⣾⡇⢀⡿⢠⠀⡇"
                   "⢸⢸⠀⢹⣷⡀⢿⡁⠀⠻⣇⠀⣇⠀⠘⣿⣿⡿⠁⠐⣉⡀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠉⠓⠳⠄⠀⠀⠀⠀⠋⠀⠘⡇⠀⠸⣿⣿⠟⠀⢈⣉⢠⡿⠁⣼⠁⣼⠃⣼⠀⡇"
                   "⢸⠸⣀⠈⣯⢳⡘⣇⠀⠀⠈⡂⣜⣆⡀⠀⠀⢀⣀⡴⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢽⣆⣀⠀⠀⠀⣀⣜⠕⡊⠀⣸⠇⣼⡟⢠⠏⠀⡇"
                   "⢸⠀⡟⠀⢸⡆⢹⡜⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠋⣾⡏⡇⡎⡇⠀⡇"
                   "⢸⠀⢃⡆⠀⢿⡄⠑⢽⣄⠀⠀⠀⢀⠂⠠⢁⠈⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠄⡐⢀⠂⠀⠀⣠⣮⡟⢹⣯⣸⣱⠁⠀⡇"
                   "⠈⠉⠉⠉⠉⠉⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠉⠉⠉⠁"))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat line (make-string (max 0 (- longest-line (length line))) 32)))
               "\n"))
     'face 'doom-dashboard-banner)))

(setq +doom-dashboard-ascii-banner-fn #'my-weebery-is-always-greater)
(setq fancy-splash-image (concat doom-private-dir "./images/logo.svg"))
#+end_src
*** modeline
Customise [[doom-package:doom-modeline][doom-modeline]].
#+begin_src emacs-lisp
(after! doom-modeline
  ;; see https://github.com/seagle0128/doom-modeline?tab=readme-ov-file#customize
  (setq doom-modeline-buffer-file-name-style 'relative-from-project
        doom-modeline-always-show-macro-register t
        doom-modeline-enable-word-count nil
        doom-modeline-buffer-encoding t
        doom-modeline-major-mode-icon t
        doom-modeline-bar-width 4
        doom-modeline-height 30
        doom-modeline-modal nil)

  ;; see https://discourse.doomemacs.org/t/how-to-switch-customize-or-write-themes/37#tweak-the-current-theme-3
  (custom-set-faces!
    `(mode-line :background ,(doom-color 'base3)
      :foreground ,(doom-color 'fg))
    `(mode-line-inactive :box nil)
      ;; (:line-width 2))
    `(mode-line-active :box nil
      ;; (:line-width 2 :color ,(doom-color 'base4))
      ;; :overline ,(doom-color 'base4)
      :foreground ,(doom-color 'fg))))
#+end_src

Change the filename showed in the modline in an =org-roam= buffer.
#+begin_src emacs-lisp
;; modified from https://tecosaur.github.io/emacs-config/config.html#modeline-file-name
(defadvice! doom-modeline--buffer-file-name-roam-aware-a (orig-fun)
  :around #'doom-modeline-buffer-file-name ; takes no args
  (if (string-match-p (regexp-quote org-roam-directory) (or buffer-file-name ""))
      (replace-regexp-in-string
       "\\(?:^\\|.*/\\)\\([0-9]\\{4\\}\\)\\([0-9]\\{2\\}\\)\\([0-9]\\{2\\}\\)[0-9]*-"
       "(\\1-\\2-\\3) "
       (subst-char-in-string ?_ ?  buffer-file-name))
    (funcall orig-fun)))
#+end_src

Only show file encoding in modeline when it's not =LF UTF-8=.
#+begin_src emacs-lisp
;; copied from https://tecosaur.github.io/emacs-config/config.html#file-encoding
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (and (memq (plist-get (coding-system-plist buffer-file-coding-system) :category)
                                 '(coding-category-undecided coding-category-utf-8))
                           (not (memq (coding-system-eol-type buffer-file-coding-system) '(1 2))))
                t)))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src
*** zen
Enable =mixed-pitch-mode= in org files and scale =doom-variable-pitch-font=.
#+begin_src emacs-lisp
;; copied from https://discourse.doomemacs.org/t/cant-size-doom-variable-pitch-font/4572/2
(add-hook! (org-mode org-roam-mode LaTeX-mode)
           #'mixed-pitch-mode)

(after! mixed-pitch
  (setq mixed-pitch-set-height t
        variable-pitch-serif-font doom-variable-pitch-font)

  (pushnew! mixed-pitch-fixed-pitch-faces
            'warning
            'org-drawer 'org-cite-key 'org-list-dt 'org-hide
            'corfu-default 'font-latex-math-face)

  ;; (set-face-attribute 'variable-pitch nil :height 1.2))
  (set-face-attribute 'variable-pitch nil :height 1.0))
#+end_src

Reduce text indent in =org-mode= because of =mixed-pitch-mode=.
#+begin_src emacs-lisp
;; copied from https://tecosaur.github.io/emacs-config/config.html#reduced-text-indent
(defadvice! +org-indent--reduced-text-prefixes ()
  :after #'org-indent--compute-prefixes
  (setq org-indent--text-line-prefixes
        (make-vector org-indent--deepest-level nil))
  (when (> org-indent-indentation-per-level 0)
    (dotimes (n org-indent--deepest-level)
      (aset org-indent--text-line-prefixes
            n
            (org-add-props
                (concat (make-string (* n (1- org-indent-indentation-per-level))
                                     ?\s)
                        (if (> n 0)
                             (char-to-string org-indent-boundary-char)
                          "\u200b"))
                nil 'face 'org-indent)))))
#+end_src
*** other
**** spacious-padding
Add padding to emacs frames and windows with [[doom-package:spacious-padding][spacious-padding]].
#+begin_src emacs-lisp
;; https://protesilaos.com/emacs/spacious-padding
(use-package! spacious-padding
  :ensure t
  :config
  (setq spacious-padding-widths
        '( :internal-border-width 20
           :header-line-width 4
           :mode-line-width 2
           :tab-width 4
           :right-divider-width 1
           :scroll-bar-width 8
           :fringe-width 0))
  (spacious-padding-mode 1))
#+end_src
** :editor
*** evil
#+begin_src emacs-lisp
(after! evil
  (setq evil-move-cursor-back nil     ; don't move the block cursor when toggling insert mode
        evil-kill-on-visual-paste nil ; don't put overwritten text in the kill ring
        evil-want-fine-undo t
        evil-move-beyond-eol t))
#+end_src
** :emacs
*** dired
Set =quick-access-entries= for =dirvish=.
Ensure [[https://github.com/alexluigit/dirvish/blob/main/docs/CUSTOMIZING.org#install-dependencies-for-an-enhanced-preview-experience][these]] programs are installed to file previews.
#+begin_src emacs-lisp
(setq dired-mouse-drag-files t
      mouse-drag-and-drop-region-cross-program t)

(after! dired-x
  (setq dired-omit-files ; hide "dotfiles"
        (concat dired-omit-files "\\|^\\..*$")))

;; FIXME not working
(add-hook! dired-mode (dired-hide-details-mode 1))

(after! dirvish
  (setq dirvish-attributes
        (append
         ;; The order of these attributes is insignificant, they are always
         ;; displayed in the same position.
         '(vc-state subtree-state nerd-icons collapse)
         ;; Other attributes are displayed in the order they appear in this list.
         '(git-msg file-size)))


  (setq! dirvish-quick-access-entries
         `(("h" "~/" "Home")
           ("c" "~/Developer/" "Code")
           ("d" "~/Downloads/" "Downloads")
           ("g" "~/GitHub/" "GitHub")
           ("t" "~/.Trash/" "Trash")
           ("o" "~/OneDrive - Stellenbosch University/"  "OneDrive")
            ;; - `scp` ensures large files are transferred out of band
            ;;    via `scp` rather than encoded in the shell session.
            ;; - `x` ensures the session is opened with `/bin/sh -i`
            ;;    via `-o RemoteCommand`.
           ("n" "/scpx:NARGA:" "NARGA"))))

(map! :leader
      :prefix "o"
      :desc "Dirvish Quick Access"
      "q" #'dirvish-quick-access)
#+end_src
** :tools
*** lsp
Improve =eglot= performance.
*NOTE*: Requires building [[https://github.com/blahgeek/emacs-lsp-booster?tab=readme-ov-file#obtain-or-build-emacs-lsp-booster][emacs-lsp-booster]].
#+begin_src emacs-lisp
(use-package! eglot-booster
  :after eglot
  :config (eglot-booster-mode))
#+end_src
*** pdf
#+begin_src emacs-lisp
;; TODO add continuous scroll
(add-hook 'pdf-view-mode-hook #'pdf-view-midnight-minor-mode)

(map! :map pdf-view-mode-map
      :localleader
      (:prefix ("h" . "history")
      :desc "Go forward in history"
      "f" #'pdf-history-forward
      :desc "Go backward in history"
      "b" #'pdf-history-backward))
#+end_src
** :lang
*** cc
Set indentation level for =cc-mode= to 2.
#+begin_src emacs-lisp
(after! cc-mode
  (setq c-basic-offset 2))
#+end_src
*** java
Set indentation level for =java-mode= to 2.
#+begin_src emacs-lisp
(after! java-mode
  (setq c-basic-offset 2))
#+end_src
*** python
Requires [[doom-module::lang python +lsp][eglot]].
*NOTE*: Requires =pyright= to be installed.
Install with ~npm install -g pyright~.
#+begin_src emacs-lisp
(after! eglot
  (add-to-list 'eglot-server-programs '(python-mode . ("pyright-langserver" "--stdio"))))

(add-hook! python-mode
  (setq python-shell-interpreter "python3.12"
        doom-modeline-env-python-executable "python3.12"))
#+end_src
*** latex
My CDLaTeX templates.
#+begin_src emacs-lisp
(after! cdlatex
  (map! :map cdlatex-mode-map
        :i "TAB" #'cdlatex-tab)

  (setq cdlatex-math-symbol-alist ; expand when prefixed with `
        ;; TODO change prefix key to something like ;
        '((?e ("\\varepsilon" "\\epsilon"))
          (?f ("\\varphi" "\\phi"))
          (?0 ("\\varnothing" "\\emptyset"))
          (?> ("\\to" "\\implies"))
          (?= ("\\iff" "\\equiv"))
          (?| ("\\mid" "\\vert"))
          (?: ("\\coloneqq")))
        cdlatex-math-modify-alist ; modify text with '
        '((?b "\\mathbb" nil t nil nil)
          (?c "\\mathcal" nil t nil nil)
          (?f "\\mathbf" nil t nil nil)
          (?m "\\mathrm" nil t nil nil)
          (?r "\\mathrel" nil t nil nil)
          (?s "\\mathsf" nil t nil nil)
          (?o "\\operatorname" nil t nil nil))
        cdlatex-command-alist ; expand with <TAB>
        '(("eqn" "Insert an EQUATION* environment template" "" cdlatex-environment ("equation*") t nil)
          ("aln" "Insert an ALIGN* environment template" "" cdlatex-environment ("align*") t nil)
          ("sum" "Insert \\sum\\limits_{}^{}" "\\sum\\limits_{?}^{}" cdlatex-position-cursor nil nil t)
          ("prod" "Insert \\prod\\limits_{}^{}" "\\prod\\limits_{?}^{}" cdlatex-position-cursor nil nil t)
          ("bun" "Insert \\bigcup\\limits_{}^{}" "\\bigcup\\limits_{?}^{}" cdlatex-position-cursor nil nil t)
          ("bin" "Insert \\bigcap\\limits_{}^{}" "\\bigcap\\limits_{?}^{}" cdlatex-position-cursor nil nil t)
          ("lim" "Insert \\lim_\\limits{{} \to {}}" "\\lim_\\limits{{?} \to {}}" cdlatex-position-cursor nil nil t)
          ("sr" "Insert {}^2" "{?}^2" cdlatex-position-cursor nil nil t)
          ("cb" "Insert {}^3" "{?}^3" cdlatex-position-cursor nil nil t)
          ("op" "Insert \\operatorname{}()" "\\operatorname{?}()" cdlatex-position-cursor nil nil t))))
#+end_src
*** org
**** org-mode
Set some org variables.
#+begin_src emacs-lisp
(setq org-directory "~/Documents/Org"
      org-use-property-inheritance t ; fix weird issue with src blocks
      org-startup-with-inline-images t
      org-edit-src-content-indentation 0
      org-highlight-latex-and-related '(native script))

;; FIXME blurry previews when using #+attr_org: :width
;; (setq org-image-actual-width (/ (display-pixel-width) 3)) ; set images to a third of the width of the screen
#+end_src

By using native highlighting the =org-face= gets added which we want to avoid.
#+begin_src emacs-lisp
(after! org-src
  (add-to-list 'org-src-block-faces
               `("latex" (:background ,(doom-color 'bg)
                          :extend t))))
#+end_src

Some custom faces.
#+begin_src emacs-lisp
(after! org
  (custom-set-faces!
    ;; `((highlight)
    ;;   :background ,(doom-color 'blue)
    ;;   :foreground ,(doom-color 'bg))
    `((org-link)
      :weight normal)
    ;;   :foreground ,(doom-color 'blue))
    `((org-block-begin-line)
      :inherit default
      :background nil)

    ;; scale headings
    `((org-document-title)
      :foreground ,(doom-color 'fg)
      :height 1.3 :weight bold)
    `((org-level-1)
      ;; :foreground ,(doom-color 'green)
      :foreground ,(face-attribute 'outline-1 :foreground)
      :height 1.1 :weight medium)
    `((org-level-2)
      ;; :foreground ,(doom-color 'yellow)
      :foreground ,(face-attribute 'outline-2 :foreground)
      :weight medium)
    `((org-level-3)
      ;; :foreground ,(doom-color 'dark-yellow)
      :foreground ,(face-attribute 'outline-3 :foreground)
      :weight medium)
    `((org-level-4)
      ;; :foreground ,(doom-color 'orange)
      :foreground ,(face-attribute 'outline-4 :foreground)
      :weight medium)
    `((org-level-5)
      ;; :foreground ,(doom-color 'red)
      :foreground ,(face-attribute 'outline-5 :foreground)
      :weight medium)))
#+end_src

Enable =evil-tex-mode= in LaTeX source blocks.
Requires [[doom-module::lang latex]] to be enabled.
#+begin_src emacs-lisp
(add-hook 'org-src-mode-hook
          (lambda ()
            (when (string= major-mode "latex-mode")
              (evil-tex-mode 1))))
#+end_src

Setup LaTeX previews in =org-mode=, =org-roam-mode= and =LaTeX-mode=.
See https://gist.github.com/karthink/0ac48411a81459c0f3fd7557c4e817db.
#+begin_src emacs-lisp
;; see https://www.reddit.com/r/emacs/comments/1kl3y9t/comment/ms22hyk/
;; TODO add snippet for inserting tikz
;; TODO enable latex previews in org-roam buffer
(after! org
  (dolist (pkg '("amsmath" "amssymb" "mathtools" "mathrsfs"))
    (add-to-list 'org-latex-packages-alist `("" ,pkg t))))

;; ;; modified from https://abode.karthinks.com/org-latex-preview/
(use-package! org-latex-preview
  :after org
  ;; :hook (org-mode . org-latex-preview-auto-mode)
  :config
  (plist-put org-latex-preview-appearance-options
             ;; :page-width 0.8)
             :page-width 1.0)

  (add-hook 'org-mode-hook 'org-latex-preview-auto-mode)
  (setq org-startup-with-latex-preview t)

  (setq org-latex-preview-auto-ignored-commands
        '(next-line previous-line mwheel-scroll ultra-scroll
          scroll-up-command scroll-down-command
          evil-scroll-up evil-scroll-down evil-scroll-line-up evil-scroll-line-down)
        org-latex-preview-numbered t
        org-latex-preview-live t
        org-latex-preview-live-debounce 0.25)

  ;; code for centering LaTeX previews -- a terrible idea
  (defun my/org-latex-preview-uncenter (ov)
    (overlay-put ov 'before-string nil))
  (defun my/org-latex-preview-recenter (ov)
    (overlay-put ov 'before-string (overlay-get ov 'justify)))
  (defun my/org-latex-preview-center (ov)
    (save-excursion
      (goto-char (overlay-start ov))
      (when-let* ((elem (org-element-context))
                  ((or (eq (org-element-type elem) 'latex-environment)
                       (string-match-p "^\\\\\\[" (org-element-property :value elem))))
                  (img (overlay-get ov 'display))
                  (prop `(space :align-to (- center (0.55 . ,img))))
                  (justify (propertize " " 'display prop 'face 'default)))
        (overlay-put ov 'justify justify)
        (overlay-put ov 'before-string (overlay-get ov 'justify)))))
  (define-minor-mode org-latex-preview-center-mode
    "Center equations previewed with `org-latex-preview'."
    :global nil
    (if org-latex-preview-center-mode
        (progn
          (add-hook 'org-latex-preview-overlay-open-functions
                    #'my/org-latex-preview-uncenter nil :local)
          (add-hook 'org-latex-preview-overlay-close-functions
                    #'my/org-latex-preview-recenter nil :local)
          (add-hook 'org-latex-preview-overlay-update-functions
                    #'my/org-latex-preview-center nil :local))
      (remove-hook 'org-latex-preview-overlay-close-functions
                   #'my/org-latex-preview-recenter)
      (remove-hook 'org-latex-preview-overlay-update-functions
                   #'my/org-latex-preview-center)
      (remove-hook 'org-latex-preview-overlay-open-functions
                   #'my/org-latex-preview-uncenter))))
#+end_src
**** org-download (dragndrop)
#+begin_src emacs-lisp
(after! org-download
  ;; FIXME image dir changes to 'assets'
  (setq-default org-download-image-dir "images")
  (setq org-download-method 'directory
        org-download-link-format"[[file:images/%s]]\n"
        org-download-heading-lvl nil))

(map! :map org-mode-map
      :localleader
      :prefix "a"
      :desc "Rename image at point"
      "C" #'org-download-rename-at-point)
#+end_src
**** eye candy ([[doom-module:+pretty]])
=org-modern= config modified from [[https://sophiebos.io/posts/beautifying-emacs-org-mode/][https://sophiebos.io/posts/beautifying-emacs-org-mode/]].
#+begin_src emacs-lisp
(after! org-modern
  (setq org-auto-align-tags t
        org-tags-column 0
        org-fold-catch-invisible-edits 'show-and-error
        org-special-ctrl-a/e t
        org-insert-heading-respect-content t

        ;; agenda
        org-agenda-tags-column 0
        org-agenda-block-separator ?─
        org-agenda-time-grid
        '((daily today require-timed)
          (800 1000 1200 1400 1600 1800 2000)
          " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
        org-agenda-current-time-string
        "⭠ now ─────────────────────────────────────────────────"

        ;; text replacements
        org-modern-block-name
        '((t . t)
          ("src" "──»" "──«")
          ("example" "─»»" "─««")
          ("quote" "─ ❝" "─ ❞")
          ("export" "⏩" "⏪"))
        org-modern-keyword
        '((t . t)
          ("title" . "𝙏")
          ("subtitle" . "𝙩")
          ("author" . "𝘼")
          ("filetags" . "")
          ("email" . "")
          ("date" . "󰃭")
          ("property" . "󰠳")
          ("options" . #("󰘵" 0 1 (display (height 0.75))))
          ("startup" . "⏻")
          ("macro" . "𝓜")
          ("bind" . "󰌷")
          ("bibliography" . "")
          ("print_bibliography" . "󰌱")
          ("cite_export" . "⮭")
          ("print_glossary" . "󰌱ᴬᶻ")
          ("glossary_sources" . "󰒻")
          ("include" . "⇤")
          ("setupfile" . "⇚")
          ("html_head" . "🅷")
          ("html" . "🅗")
          ("latex_class" . "🄻")
          ("latex_class_options" . "🄻󰒓")
          ("latex_header" . "🅻")
          ("latex_header_extra" . "🅻⁺")
          ("latex" . "🅛")
          ("attr_latex" . "🄛")
          ("attr_html" . "🄗")
          ("attr_org" . "⒪")
          ("call" . "󰜎")
          ("name" . "⁍")
          ("header" . "›")
          ("caption" . "☰")
          ("results" . "🠶"))))

(after! org-appear
  (setq org-hide-emphasis-markers t
        org-pretty-entities nil
        ;; org-appear-autoentities t
        org-appear-autosubmarkers t
        org-appear-inside-latex t))

(add-hook 'org-mode-hook #'org-modern-indent-mode)
(add-hook 'org-mode-hook #'valign-mode) ;; fix tables

(after! valign
  (setq valign-fancy-bar t))
#+end_src
**** org-roam
Set up =org-roam= and =org-roam-ui= along with their keybindings that have the [[kbd:][<leader> r]]  prefix.
#+begin_src emacs-lisp
;; TODO setup capture templates
(use-package! org-roam
  :defer t
  :config
  (setq org-roam-directory (file-truename "~/Notes")
        org-roam-db-location (file-truename "~/Notes/org-roam.db")
        org-attach-id-dir "assets/")
  (org-roam-db-autosync-enable))

(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t
        org-roam-mode-sections
        (list #'org-roam-backlinks-section
              #'org-roam-reflinks-section
              #'org-roam-unlinked-references-section)))

;; custom org-roam functions
(defun my/org-roam--after-point ()
  "If in evil normal state and not at EOL, move one char forward."
  (when (and (bound-and-true-p evil-mode)
             (evil-normal-state-p)
             (not (eolp)))
    (forward-char)))
(defun my/org-roam-insert-lowercase ()
  "Insert an org-roam link after point, forcing the link text to lower-case."
  (interactive)
  (let ((org-roam-node-formatter
         (lambda (node) (downcase (org-roam-node-title node)))))
    (my/org-roam--after-point)
    (call-interactively #'org-roam-node-insert)))
(defun my/org-roam-insert-custom-title ()
  "Pick a node, then prompt for a verbatim link description."
  (interactive)
  (my/org-roam--after-point)
  (let* ((node (org-roam-node-read))
         (desc (read-string "Description: "))
         (link (org-link-make-string
                (concat "id:" (org-roam-node-id node))
                desc)))
    (insert link)
    (org-roam-link-replace-at-point link)
    (run-hooks 'org-roam-insert-node-hook)
    (forward-char)))

(map! :map evil-org-mode-map
      :leader
      (:prefix ("r" . "roam")
       :desc "Add alias"
       "a" #'org-roam-alias-add
       :desc "Remove alias"
       "A" #'org-roam-alias-remove
       :desc "Toggle roam buffer"
       "b" #'org-roam-buffer-toggle
       :desc "Find node"
       "f" #'org-roam-node-find
       :desc "Insert node"
       "i" #'my/org-roam-insert-lowercase
       :desc "Insert node (prompt title)"
       "I" #'my/org-roam-insert-custom-title
       :desc "Add tag"
       "t" #'org-roam-tag-add
       :desc "Remove tag"
       "T" #'org-roam-tag-remove
       :desc "Visit node"
       "v" #'org-roam-node-visit
       :desc "Open ORUI"
       "u" #'org-roam-ui-open))
#+end_src
